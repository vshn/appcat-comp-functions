apiVersion: apiextensions.crossplane.io/v1alpha1
kind: FunctionIO
observed:
  composite:
    resource:
      apiVersion: vshn.appcat.vshn.io/v1
      kind: XVSHNPostgreSQL
      metadata:
        name: pgsql-gc9x4
      spec:
        claimRef:
          apiVersion: vshn.appcat.vshn.io/v1
          kind: VSHNPostgreSQL
          name: pgsql
          namespace: test
        compositionRef:
          name: vshnpostgres.vshn.appcat.vshn.io
        compositionRevisionRef:
          name: vshnpostgres.vshn.appcat.vshn.io-ce52f13
        compositionUpdatePolicy: Automatic
        parameters:
          backup:
            retention: 6
            schedule: 0 22 * * *
          maintenance:
            dayOfWeek: tuesday
            timeOfDay: "22:30:00"
          service:
            majorVersion: "15"
          size:
            cpu: 600m
            disk: 5Gi
            memory: 3500Mi
            plan: standard-2
        resourceRefs:
          - apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            name: pgsql-gc9x4-connection
      status:
        instanceNamespace: vshn-postgresql-pgsql-gc9x4
  resources:
    - name: connection
      resource:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: pgsql-gc9x4-connection
          namespace: test
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                name: pgsql-connection
                namespace: vshn-postgresql-pgsql-gc9x4
              data:
                POSTGRESQL_PASSWORD: NjM5Yi05MDc2LTRkZTYtYTM1
              stringData:
                POSTGRESQL_DB: postgres
                POSTGRESQL_HOST: pgsql-gc9x4.vshn-postgresql-pgsql-gc9x4.svc.cluster.local
                POSTGRESQL_PORT: "5432"
                POSTGRESQL_USER: postgres
          providerConfigRef:
            name: kubernetes
          references:
            - patchesFrom:
                apiVersion: v1
                fieldPath: data.superuser-password
                kind: Secret
                name: final-test
                namespace: test
              toFieldPath: data.POSTGRESQL_PASSWORD
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[ca.crt]
                kind: Secret
                name: tls-certificate
                namespace: test
              toFieldPath: data[ca.crt]
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[tls.crt]
                kind: Secret
                name: tls-certificate
                namespace: test
              toFieldPath: data[tls.crt]
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[tls.key]
                kind: Secret
                name: tls-certificate
                namespace: test
              toFieldPath: data[tls.key]
          writeConnectionSecretToRef:
            name: final-test
            namespace: test
        status:
          atProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                name: pgsql-connection
                namespace: vshn-postgresql-pgsql-gc9x4
              data:
                POSTGRESQL_PASSWORD: NjM5Yi05MDc2LTRkZTYtYTM1
                POSTGRESQL_DB: cG9zdGdyZXM=
                POSTGRESQL_HOST: cGdzcWwtZ2M5eDQudnNobi1wb3N0Z3Jlc3FsLXBnc3FsLWdjOXg0LnN2Yy5jbHVzdGVyLmxvY2Fs
                POSTGRESQL_PORT: NTQzMg==
                POSTGRESQL_USER: cG9zdGdyZXM=
      connectionDetails:
        - fromConnectionSecretKey: ca.crt
          name: ca.crt
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: tls.crt
          name: tls.crt
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: tls.key
          name: tls.key
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_URL
          name: POSTGRESQL_URL
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_DB
          name: POSTGRESQL_DB
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_HOST
          name: POSTGRESQL_HOST
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_PORT
          name: POSTGRESQL_PORT
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_USER
          name: POSTGRESQL_USER
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_PASSWORD
          name: POSTGRESQL_PASSWORD
          type: FromConnectionSecretKey
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.secretConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: '%s.vshn-postgresql-%s.svc.cluster.local'
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.stringData.POSTGRESQL_HOST
          type: CombineFromComposite
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[1].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[2].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[3].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
desired:
  composite:
    resource:
      apiVersion: vshn.appcat.vshn.io/v1
      kind: XVSHNPostgreSQL
      metadata:
        name: pgsql-gc9x4
      spec:
        claimRef:
          apiVersion: vshn.appcat.vshn.io/v1
          kind: VSHNPostgreSQL
          name: pgsql
          namespace: test
        compositionRef:
          name: vshnpostgres.vshn.appcat.vshn.io
        compositionRevisionRef:
          name: vshnpostgres.vshn.appcat.vshn.io-ce52f13
        compositionUpdatePolicy: Automatic
        parameters:
          backup:
            retention: 6
            schedule: 0 22 * * *
          maintenance:
            dayOfWeek: tuesday
            timeOfDay: "22:30:00"
          service:
            majorVersion: "15"
          size:
            cpu: 600m
            disk: 5Gi
            memory: 3500Mi
            plan: standard-2
        resourceRefs:
          - apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            name: pgsql-gc9x4-connection
      status:
        instanceNamespace: vshn-postgresql-pgsql-gc9x4
  resources:
    - name: connection
      resource:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: pgsql-gc9x4-connection
          namespace: test
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                name: pgsql-connection
                namespace: vshn-postgresql-pgsql-gc9x4
              data:
                POSTGRESQL_PASSWORD: NjM5Yi05MDc2LTRkZTYtYTM1
              stringData:
                POSTGRESQL_DB: postgres
                POSTGRESQL_HOST: pgsql-gc9x4.vshn-postgresql-pgsql-gc9x4.svc.cluster.local
                POSTGRESQL_PORT: "5432"
                POSTGRESQL_USER: postgres
          providerConfigRef:
            name: kubernetes
          references:
            - patchesFrom:
                apiVersion: v1
                fieldPath: data.superuser-password
                kind: Secret
                name: final-test
                namespace: test
              toFieldPath: data.POSTGRESQL_PASSWORD
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[ca.crt]
                kind: Secret
                name: tls-certificate
                namespace: test
              toFieldPath: data[ca.crt]
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[tls.crt]
                kind: Secret
                name: tls-certificate
                namespace: test
              toFieldPath: data[tls.crt]
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[tls.key]
                kind: Secret
                name: tls-certificate
                namespace: test
              toFieldPath: data[tls.key]
          writeConnectionSecretToRef:
            name: final-test
            namespace: test
      connectionDetails:
        - fromConnectionSecretKey: ca.crt
          name: ca.crt
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: tls.crt
          name: tls.crt
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: tls.key
          name: tls.key
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_URL
          name: POSTGRESQL_URL
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_DB
          name: POSTGRESQL_DB
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_HOST
          name: POSTGRESQL_HOST
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_PORT
          name: POSTGRESQL_PORT
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_USER
          name: POSTGRESQL_USER
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: POSTGRESQL_PASSWORD
          name: POSTGRESQL_PASSWORD
          type: FromConnectionSecretKey
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.secretConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: '%s.vshn-postgresql-%s.svc.cluster.local'
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.stringData.POSTGRESQL_HOST
          type: CombineFromComposite
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[1].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[2].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[3].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-postgresql-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
results:
  - severity: Normal
    message: "Successfully composed VSHNPostgreSQL database"
