// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v0.0.0-00010101000000-000000000000 DO NOT EDIT.
package v1

// SGDbOpsSpec defines model for SGDbOpsSpec.
type SGDbOpsSpec struct {
	// Configuration of the benchmark
	Benchmark *SGDbOpsSpecBenchmark `json:"benchmark,omitempty"`

	// Configuration of major version upgrade (see also [`pg_upgrade`](https://www.postgresql.org/docs/current/pgupgrade.html) command)
	MajorVersionUpgrade *SGDbOpsSpecMajorVersionUpgrade `json:"majorVersionUpgrade,omitempty"`

	// The maximum number of retries the operation is allowed to do after a failure.
	//
	// A value of `0` (zero) means no retries are made. Can not be greater than `10`. Defaults to: `0`.
	MaxRetries *int `json:"maxRetries,omitempty"`

	// Configuration of minor version upgrade
	MinorVersionUpgrade *SGDbOpsSpecMinorVersionUpgrade `json:"minorVersionUpgrade,omitempty"`

	// The kind of operation that will be performed on the SGCluster. Available operations are:
	//
	// * `benchmark`: run a benchmark on the specified SGCluster and report the results in the status.
	// * `vacuum`: perform a [vacuum](https://www.postgresql.org/docs/current/sql-vacuum.html) operation on the specified SGCluster.
	// * `repack`: run [`pg_repack`](https://github.com/reorg/pg_repack) command on the specified SGCluster.
	// * `majorVersionUpgrade`: perform a major version upgrade of PostgreSQL using [`pg_upgrade`](https://www.postgresql.org/docs/current/pgupgrade.html) command.
	// * `restart`: perform a restart of the cluster.
	// * `minorVersionUpgrade`: perform a minor version upgrade of PostgreSQL.
	// * `securityUpgrade`: perform a security upgrade of the cluster.
	// * `upgrade`: perform a operator API upgrade of the cluster
	Op string `json:"op"`

	// Configuration of [`pg_repack`](https://github.com/reorg/pg_repack) command
	Repack *SGDbOpsSpecRepack `json:"repack,omitempty"`

	// Configuration of restart
	Restart *SGDbOpsSpecRestart `json:"restart,omitempty"`

	// An ISO 8601 date, that holds UTC scheduled date of the operation execution.
	//
	// If not specified or if the date it's in the past, it will be interpreted ASAP.
	RunAt *string `json:"runAt,omitempty"`

	// Pod custom node scheduling and affinity configuration
	Scheduling *SGDbOpsSpecScheduling `json:"scheduling,omitempty"`

	// Configuration of security upgrade
	SecurityUpgrade *SGDbOpsSpecSecurityUpgrade `json:"securityUpgrade,omitempty"`

	// The name of SGCluster on which the operation will be performed.
	SgCluster string `json:"sgCluster"`

	// An ISO 8601 duration in the format `PnDTnHnMn.nS`, that specifies a timeout after which the operation execution will be canceled.
	//
	// If the operation can not be performed due to timeout expiration, the condition `Failed` will have a status of `True` and the reason will be `OperationTimedOut`.
	//
	// If not specified the operation will never fail for timeout expiration.
	Timeout *string `json:"timeout,omitempty"`

	// Configuration of [vacuum](https://www.postgresql.org/docs/current/sql-vacuum.html) operation
	Vacuum *SGDbOpsSpecVacuum `json:"vacuum,omitempty"`
}

// SGDbOpsSpecBenchmark defines model for SGDbOpsSpecBenchmark.
type SGDbOpsSpecBenchmark struct {
	// Specify the service where the benchmark will connect to:
	//
	// * `primary-service`: Connect to the primary service
	// * `replicas-service`: Connect to the replicas service
	ConnectionType *string `json:"connectionType,omitempty"`

	// Configuration of [pgbench](https://www.postgresql.org/docs/current/pgbench.html) benchmark
	Pgbench *SGDbOpsSpecBenchmarkPgbench `json:"pgbench,omitempty"`

	// The type of benchmark that will be performed on the SGCluster. Available benchmarks are:
	//
	// * `pgbench`: run [pgbench](https://www.postgresql.org/docs/current/pgbench.html) on the specified SGCluster and report the results in the status.
	Type string `json:"type"`
}

// SGDbOpsSpecBenchmarkPgbench defines model for SGDbOpsSpecBenchmarkPgbench.
type SGDbOpsSpecBenchmarkPgbench struct {
	// Number of clients simulated, that is, number of concurrent database sessions. Defaults to: `1`.
	ConcurrentClients *int `json:"concurrentClients,omitempty"`

	// Size of the database to generate. This size is specified either in Mebibytes, Gibibytes or Tebibytes (multiples of 2^20, 2^30 or 2^40, respectively).
	DatabaseSize string `json:"databaseSize"`

	// An ISO 8601 duration in the format `PnDTnHnMn.nS`, that specifies how long the benchmark will run.
	Duration string `json:"duration"`

	// Number of worker threads within pgbench. Using more than one thread can be helpful on multi-CPU machines. Clients are distributed as evenly as possible among available threads. Default is `1`.
	Threads *int `json:"threads,omitempty"`

	// Use extended query protocol with prepared statements. Defaults to: `false`.
	UsePreparedStatements *bool `json:"usePreparedStatements,omitempty"`
}

// SGDbOpsSpecMajorVersionUpgrade defines model for SGDbOpsSpecMajorVersionUpgrade.
type SGDbOpsSpecMajorVersionUpgrade struct {
	// The path were the backup is stored. If not set this field is filled up by the operator.
	//
	// When provided will indicate were the backups and WAL files will be stored.
	//
	// The path should be different from the current `.spec.configurations.backupPath` value for the target `SGCluster`
	//  in order to avoid mixing WAL files of two distinct major versions of postgres.
	BackupPath *string `json:"backupPath,omitempty"`

	// If true does some checks to see if the cluster can perform a major version upgrade without changing any data. Defaults to: `false`.
	Check *bool `json:"check,omitempty"`

	// If true use efficient file cloning (also known as "reflinks" on some systems) instead of copying files to the new cluster.
	// This can result in near-instantaneous copying of the data files, giving the speed advantages of `link` while leaving the old
	//  cluster untouched. This option is mutually exclusive with `link`. Defaults to: `false`.
	//
	// File cloning is only supported on some operating systems and file systems. If it is selected but not supported, the pg_upgrade
	//  run will error. At present, it is supported on Linux (kernel 4.5 or later) with Btrfs and XFS (on file systems created with
	//  reflink support), and on macOS with APFS.
	Clone *bool `json:"clone,omitempty"`

	// If true use hard links instead of copying files to the new cluster. This option is mutually exclusive with `clone`. Defaults to: `false`.
	Link *bool `json:"link,omitempty"`

	// The target postgres version that must have the same major version of the target SGCluster.
	PostgresVersion *string `json:"postgresVersion,omitempty"`

	// The postgres config that must have the same major version of the target postgres version.
	SgPostgresConfig *string `json:"sgPostgresConfig,omitempty"`
}

// SGDbOpsSpecMinorVersionUpgrade defines model for SGDbOpsSpecMinorVersionUpgrade.
type SGDbOpsSpecMinorVersionUpgrade struct {
	// The method used to perform the minor version upgrade operation. Available methods are:
	//
	// * `InPlace`: the in-place method does not require more resources than those that are available.
	//   In case only an instance of the StackGres cluster is present this mean the service disruption will
	//   last longer so we encourage use the reduced impact restart and especially for a production environment.
	// * `ReducedImpact`: this procedure is the same as the in-place method but require additional
	//   resources in order to spawn a new updated replica that will be removed when the procedure completes.
	Method *string `json:"method,omitempty"`

	// The target postgres version that must have the same major version of the target SGCluster.
	PostgresVersion *string `json:"postgresVersion,omitempty"`
}

// SGDbOpsSpecRepack defines model for SGDbOpsSpecRepack.
type SGDbOpsSpecRepack struct {
	// List of database to vacuum or repack, don't specify to select all databases
	Databases *[]SGDbOpsSpecRepackDatabasesItem `json:"databases,omitempty"`

	// If true don't repack tables which belong to specific extension. Defaults to: `false`.
	ExcludeExtension *bool `json:"excludeExtension,omitempty"`

	// If true don't analyze at end. Defaults to: `false`.
	NoAnalyze *bool `json:"noAnalyze,omitempty"`

	// If true don't kill other backends when timed out. Defaults to: `false`.
	NoKillBackend *bool `json:"noKillBackend,omitempty"`

	// If true do vacuum full instead of cluster. Defaults to: `false`.
	NoOrder *bool `json:"noOrder,omitempty"`

	// If specified, an ISO 8601 duration format `PnDTnHnMn.nS` to set a timeout to cancel other backends on conflict.
	WaitTimeout *string `json:"waitTimeout,omitempty"`
}

// SGDbOpsSpecRepackDatabasesItem defines model for SGDbOpsSpecRepackDatabasesItem.
type SGDbOpsSpecRepackDatabasesItem struct {
	// If true don't repack tables which belong to specific extension. Defaults to: `false`.
	ExcludeExtension *bool `json:"excludeExtension,omitempty"`

	// the name of the database
	Name string `json:"name"`

	// If true don't analyze at end. Defaults to: `false`.
	NoAnalyze *bool `json:"noAnalyze,omitempty"`

	// If true don't kill other backends when timed out. Defaults to: `false`.
	NoKillBackend *bool `json:"noKillBackend,omitempty"`

	// If true do vacuum full instead of cluster. Defaults to: `false`.
	NoOrder *bool `json:"noOrder,omitempty"`

	// If specified, an ISO 8601 duration format `PnDTnHnMn.nS` to set a timeout to cancel other backends on conflict.
	WaitTimeout *string `json:"waitTimeout,omitempty"`
}

// SGDbOpsSpecRestart defines model for SGDbOpsSpecRestart.
type SGDbOpsSpecRestart struct {
	// The method used to perform the restart operation. Available methods are:
	//
	// * `InPlace`: the in-place method does not require more resources than those that are available.
	//   In case only an instance of the StackGres cluster is present this mean the service disruption will
	//   last longer so we encourage use the reduced impact restart and especially for a production environment.
	// * `ReducedImpact`: this procedure is the same as the in-place method but require additional
	//   resources in order to spawn a new updated replica that will be removed when the procedure completes.
	Method *string `json:"method,omitempty"`

	// By default all Pods are restarted. Setting this option to `true` allow to restart only those Pods which
	//  are in pending restart state as detected by the operation. Defaults to: `false`.
	OnlyPendingRestart *bool `json:"onlyPendingRestart,omitempty"`
}

// SGDbOpsSpecScheduling defines model for SGDbOpsSpecScheduling.
type SGDbOpsSpecScheduling struct {
	// Node affinity is a group of node affinity scheduling rules.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#nodeaffinity-v1-core
	NodeAffinity *SGDbOpsSpecSchedulingNodeAffinity `json:"nodeAffinity,omitempty"`

	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// Pod affinity is a group of inter pod affinity scheduling rules.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podaffinity-v1-core
	PodAffinity *SGDbOpsSpecSchedulingPodAffinity `json:"podAffinity,omitempty"`

	// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podantiaffinity-v1-core
	PodAntiAffinity *SGDbOpsSpecSchedulingPodAntiAffinity `json:"podAntiAffinity,omitempty"`

	// If specified, the pod's tolerations.
	//
	// See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#toleration-v1-core
	Tolerations *[]SGDbOpsSpecSchedulingTolerationsItem `json:"tolerations,omitempty"`
}

// SGDbOpsSpecSchedulingNodeAffinity defines model for SGDbOpsSpecSchedulingNodeAffinity.
type SGDbOpsSpecSchedulingNodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution *[]SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	RequiredDuringSchedulingIgnoredDuringExecution *SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem defines model for SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.
type SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
	Preference SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference `json:"preference"`

	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference defines model for SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference.
type SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions *[]SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// A list of node selector requirements by node's fields.
	MatchFields *[]SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem `json:"matchFields,omitempty"`
}

// SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem defines model for SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem.
type SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem defines model for SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem.
type SGDbOpsSpecSchedulingNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchFieldsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution defines model for SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.
type SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem `json:"nodeSelectorTerms"`
}

// SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem defines model for SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem.
type SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions *[]SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// A list of node selector requirements by node's fields.
	MatchFields *[]SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem `json:"matchFields,omitempty"`
}

// SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem defines model for SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem.
type SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchExpressionsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem defines model for SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem.
type SGDbOpsSpecSchedulingNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItemMatchFieldsItem struct {
	// The label key that the selector applies to.
	Key string `json:"key"`

	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	//
	Operator string `json:"operator"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingPodAffinity defines model for SGDbOpsSpecSchedulingPodAffinity.
type SGDbOpsSpecSchedulingPodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution *[]SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution *[]SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem defines model for SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.
type SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
	PodAffinityTerm SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm `json:"podAffinityTerm"`

	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm defines model for SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.
type SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector defines model for SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector.
type SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem defines model for SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem.
type SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector defines model for SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector.
type SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem defines model for SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem.
type SGDbOpsSpecSchedulingPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem defines model for SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.
type SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector defines model for SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.
type SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem defines model for SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem.
type SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector defines model for SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.
type SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem defines model for SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem.
type SGDbOpsSpecSchedulingPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingPodAntiAffinity defines model for SGDbOpsSpecSchedulingPodAntiAffinity.
type SGDbOpsSpecSchedulingPodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution *[]SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution *[]SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem defines model for SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.
type SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem struct {
	// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
	PodAffinityTerm SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm `json:"podAffinityTerm"`

	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm defines model for SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.
type SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector defines model for SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector.
type SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem defines model for SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem.
type SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector defines model for SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector.
type SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem defines model for SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem.
type SGDbOpsSpecSchedulingPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem defines model for SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.
type SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector `json:"labelSelector,omitempty"`

	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces *[]string `json:"namespaces,omitempty"`

	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector defines model for SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.
type SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem defines model for SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem.
type SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector defines model for SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.
type SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *[]SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem `json:"matchExpressions,omitempty"`

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem defines model for SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem.
type SGDbOpsSpecSchedulingPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelectorMatchExpressionsItem struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`

	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`

	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values *[]string `json:"values,omitempty"`
}

// SGDbOpsSpecSchedulingTolerationsItem defines model for SGDbOpsSpecSchedulingTolerationsItem.
type SGDbOpsSpecSchedulingTolerationsItem struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	//
	Effect *string `json:"effect,omitempty"`

	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `json:"key,omitempty"`

	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	//
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int64 `json:"tolerationSeconds,omitempty"`

	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `json:"value,omitempty"`
}

// SGDbOpsSpecSecurityUpgrade defines model for SGDbOpsSpecSecurityUpgrade.
type SGDbOpsSpecSecurityUpgrade struct {
	// The method used to perform the security upgrade operation. Available methods are:
	//
	// * `InPlace`: the in-place method does not require more resources than those that are available.
	//   In case only an instance of the StackGres cluster is present this mean the service disruption will
	//   last longer so we encourage use the reduced impact restart and especially for a production environment.
	// * `ReducedImpact`: this procedure is the same as the in-place method but require additional
	//   resources in order to spawn a new updated replica that will be removed when the procedure completes.
	Method *string `json:"method,omitempty"`
}

// SGDbOpsSpecVacuum defines model for SGDbOpsSpecVacuum.
type SGDbOpsSpecVacuum struct {
	// If true, updates statistics used by the planner to determine the most efficient way to execute a query. Defaults to: `true`.
	Analyze *bool `json:"analyze,omitempty"`

	// List of databases to vacuum or repack, don't specify to select all databases
	Databases *[]SGDbOpsSpecVacuumDatabasesItem `json:"databases,omitempty"`

	// Normally, VACUUM will skip pages based on the visibility map. Pages where all tuples are known to be frozen can always be
	//  skipped, and those where all tuples are known to be visible to all transactions may be skipped except when performing an
	//  aggressive vacuum. Furthermore, except when performing an aggressive vacuum, some pages may be skipped in order to avoid
	//  waiting for other sessions to finish using them. This option disables all page-skipping behavior, and is intended to be
	//  used only when the contents of the visibility map are suspect, which should happen only if there is a hardware or
	//  software issue causing database corruption. Defaults to: `false`.
	DisablePageSkipping *bool `json:"disablePageSkipping,omitempty"`

	// If true selects aggressive "freezing" of tuples. Specifying FREEZE is equivalent to performing VACUUM with the
	//  vacuum_freeze_min_age and vacuum_freeze_table_age parameters set to zero. Aggressive freezing is always performed
	//  when the table is rewritten, so this option is redundant when FULL is specified. Defaults to: `false`.
	Freeze *bool `json:"freeze,omitempty"`

	// If true selects "full" vacuum, which can reclaim more space, but takes much longer and exclusively locks the table.
	// This method also requires extra disk space, since it writes a new copy of the table and doesn't release the old copy
	//  until the operation is complete. Usually this should only be used when a significant amount of space needs to be
	//  reclaimed from within the table. Defaults to: `false`.
	Full *bool `json:"full,omitempty"`
}

// SGDbOpsSpecVacuumDatabasesItem defines model for SGDbOpsSpecVacuumDatabasesItem.
type SGDbOpsSpecVacuumDatabasesItem struct {
	// If true, updates statistics used by the planner to determine the most efficient way to execute a query. Defaults to: `true`.
	Analyze *bool `json:"analyze,omitempty"`

	// Normally, VACUUM will skip pages based on the visibility map. Pages where all tuples are known to be frozen can always be
	//  skipped, and those where all tuples are known to be visible to all transactions may be skipped except when performing an
	//  aggressive vacuum. Furthermore, except when performing an aggressive vacuum, some pages may be skipped in order to avoid
	//  waiting for other sessions to finish using them. This option disables all page-skipping behavior, and is intended to be
	//  used only when the contents of the visibility map are suspect, which should happen only if there is a hardware or
	//  software issue causing database corruption. Defaults to: `false`.
	DisablePageSkipping *bool `json:"disablePageSkipping,omitempty"`

	// If true selects aggressive "freezing" of tuples. Specifying FREEZE is equivalent to performing VACUUM with the
	//  vacuum_freeze_min_age and vacuum_freeze_table_age parameters set to zero. Aggressive freezing is always performed
	//  when the table is rewritten, so this option is redundant when FULL is specified. Defaults to: `false`.
	Freeze *bool `json:"freeze,omitempty"`

	// If true selects "full" vacuum, which can reclaim more space, but takes much longer and exclusively locks the table.
	// This method also requires extra disk space, since it writes a new copy of the table and doesn't release the old copy
	//  until the operation is complete. Usually this should only be used when a significant amount of space needs to be
	//  reclaimed from within the table. Defaults to: `false`.
	Full *bool `json:"full,omitempty"`

	// the name of the database
	Name string `json:"name"`
}

// SGDbOpsStatus defines model for SGDbOpsStatus.
type SGDbOpsStatus struct {
	// The results of the benchmark
	Benchmark *SGDbOpsStatusBenchmark `json:"benchmark,omitempty"`

	// Possible conditions are:
	//
	// * Running: to indicate when the operation is actually running
	// * Completed: to indicate when the operation has completed successfully
	// * Failed: to indicate when the operation has failed
	Conditions *[]SGDbOpsStatusConditionsItem `json:"conditions,omitempty"`

	// The results of a major version upgrade
	MajorVersionUpgrade *SGDbOpsStatusMajorVersionUpgrade `json:"majorVersionUpgrade,omitempty"`

	// The results of a minor version upgrade
	MinorVersionUpgrade *SGDbOpsStatusMinorVersionUpgrade `json:"minorVersionUpgrade,omitempty"`

	// The number of retries performed by the operation
	OpRetries *int `json:"opRetries,omitempty"`

	// The ISO 8601 timestamp of when the operation started running
	OpStarted *string `json:"opStarted,omitempty"`

	// The results of a restart
	Restart *SGDbOpsStatusRestart `json:"restart,omitempty"`

	// The results of a security upgrade
	SecurityUpgrade *SGDbOpsStatusSecurityUpgrade `json:"securityUpgrade,omitempty"`
}

// SGDbOpsStatusBenchmark defines model for SGDbOpsStatusBenchmark.
type SGDbOpsStatusBenchmark struct {
	// The results of the pgbench benchmark
	Pgbench *SGDbOpsStatusBenchmarkPgbench `json:"pgbench,omitempty"`
}

// SGDbOpsStatusBenchmarkPgbench defines model for SGDbOpsStatusBenchmarkPgbench.
type SGDbOpsStatusBenchmarkPgbench struct {
	// The latency results of the pgbench benchmark
	Latency *SGDbOpsStatusBenchmarkPgbenchLatency `json:"latency,omitempty"`

	// The scale factor used to run pgbench (`--scale`).
	ScaleFactor *float32 `json:"scaleFactor"`

	// All the transactions per second results of the pgbench benchmark
	TransactionsPerSecond *SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecond `json:"transactionsPerSecond,omitempty"`

	// The number of transactions processed.
	TransactionsProcessed *int `json:"transactionsProcessed"`
}

// SGDbOpsStatusBenchmarkPgbenchLatency defines model for SGDbOpsStatusBenchmarkPgbenchLatency.
type SGDbOpsStatusBenchmarkPgbenchLatency struct {
	// Average latency of transactions
	Average *SGDbOpsStatusBenchmarkPgbenchLatencyAverage `json:"average,omitempty"`

	// The latency standard deviation of transactions.
	StandardDeviation *SGDbOpsStatusBenchmarkPgbenchLatencyStandardDeviation `json:"standardDeviation,omitempty"`
}

// SGDbOpsStatusBenchmarkPgbenchLatencyAverage defines model for SGDbOpsStatusBenchmarkPgbenchLatencyAverage.
type SGDbOpsStatusBenchmarkPgbenchLatencyAverage struct {
	// The latency measure unit represented in milliseconds
	Unit *string `json:"unit,omitempty"`

	// The latency average value
	Value *float32 `json:"value"`
}

// SGDbOpsStatusBenchmarkPgbenchLatencyStandardDeviation defines model for SGDbOpsStatusBenchmarkPgbenchLatencyStandardDeviation.
type SGDbOpsStatusBenchmarkPgbenchLatencyStandardDeviation struct {
	// The latency measure unit represented in milliseconds
	Unit *string `json:"unit,omitempty"`

	// The latency standard deviation value
	Value *float32 `json:"value"`
}

// SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecond defines model for SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecond.
type SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecond struct {
	// Number of Transaction Per Second (tps) excluding connection establishing.
	ExcludingConnectionsEstablishing *SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecondExcludingConnectionsEstablishing `json:"excludingConnectionsEstablishing,omitempty"`

	// Number of Transaction Per Second (tps) including connection establishing.
	IncludingConnectionsEstablishing *SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecondIncludingConnectionsEstablishing `json:"includingConnectionsEstablishing,omitempty"`
}

// SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecondExcludingConnectionsEstablishing defines model for SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecondExcludingConnectionsEstablishing.
type SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecondExcludingConnectionsEstablishing struct {
	// Transaction Per Second (tps) measure
	Unit *string `json:"unit,omitempty"`

	// The Transaction Per Second (tps) excluding connections establishing value
	Value *float32 `json:"value"`
}

// SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecondIncludingConnectionsEstablishing defines model for SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecondIncludingConnectionsEstablishing.
type SGDbOpsStatusBenchmarkPgbenchTransactionsPerSecondIncludingConnectionsEstablishing struct {
	// Transaction Per Second (tps) measure
	Unit *string `json:"unit,omitempty"`

	// The Transaction Per Second (tps) including connections establishing value
	Value *float32 `json:"value"`
}

// SGDbOpsStatusConditionsItem defines model for SGDbOpsStatusConditionsItem.
type SGDbOpsStatusConditionsItem struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`

	// A human-readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`

	// The reason for the condition last transition.
	Reason *string `json:"reason,omitempty"`

	// Status of the condition, one of `True`, `False` or `Unknown`.
	Status *string `json:"status,omitempty"`

	// Type of deployment condition.
	Type *string `json:"type,omitempty"`
}

// SGDbOpsStatusMajorVersionUpgrade defines model for SGDbOpsStatusMajorVersionUpgrade.
type SGDbOpsStatusMajorVersionUpgrade struct {
	// A failure message (when available)
	Failure *string `json:"failure,omitempty"`

	// The instances present when the operation started
	InitialInstances *[]string `json:"initialInstances,omitempty"`

	// The instances that are pending to be restarted
	PendingToRestartInstances *[]string `json:"pendingToRestartInstances,omitempty"`

	// The primary instance when the operation started
	PrimaryInstance *string `json:"primaryInstance,omitempty"`

	// The instances that have been restarted
	RestartedInstances *[]string `json:"restartedInstances,omitempty"`

	// The postgres version currently used by the primary instance
	SourcePostgresVersion *string `json:"sourcePostgresVersion,omitempty"`

	// The postgres version that the cluster will be upgraded to
	TargetPostgresVersion *string `json:"targetPostgresVersion,omitempty"`
}

// SGDbOpsStatusMinorVersionUpgrade defines model for SGDbOpsStatusMinorVersionUpgrade.
type SGDbOpsStatusMinorVersionUpgrade struct {
	// A failure message (when available)
	Failure *string `json:"failure,omitempty"`

	// The instances present when the operation started
	InitialInstances *[]string `json:"initialInstances,omitempty"`

	// The instances that are pending to be restarted
	PendingToRestartInstances *[]string `json:"pendingToRestartInstances,omitempty"`

	// The primary instance when the operation started
	PrimaryInstance *string `json:"primaryInstance,omitempty"`

	// The instances that have been restarted
	RestartedInstances *[]string `json:"restartedInstances,omitempty"`

	// The postgres version currently used by the primary instance
	SourcePostgresVersion *string `json:"sourcePostgresVersion,omitempty"`

	// An ISO 8601 date indicating if and when the switchover finalized
	SwitchoverFinalized *string `json:"switchoverFinalized,omitempty"`

	// An ISO 8601 date indicating if and when the switchover initiated
	SwitchoverInitiated *string `json:"switchoverInitiated,omitempty"`

	// The postgres version that the cluster will be upgraded (or downgraded) to
	TargetPostgresVersion *string `json:"targetPostgresVersion,omitempty"`
}

// SGDbOpsStatusRestart defines model for SGDbOpsStatusRestart.
type SGDbOpsStatusRestart struct {
	// A failure message (when available)
	Failure *string `json:"failure,omitempty"`

	// The instances present when the operation started
	InitialInstances *[]string `json:"initialInstances,omitempty"`

	// The instances that are pending to be restarted
	PendingToRestartInstances *[]string `json:"pendingToRestartInstances,omitempty"`

	// The primary instance when the operation started
	PrimaryInstance *string `json:"primaryInstance,omitempty"`

	// The instances that have been restarted
	RestartedInstances *[]string `json:"restartedInstances,omitempty"`

	// An ISO 8601 date indicating if and when the switchover finalized
	SwitchoverFinalized *string `json:"switchoverFinalized,omitempty"`

	// An ISO 8601 date indicating if and when the switchover initiated
	SwitchoverInitiated *string `json:"switchoverInitiated,omitempty"`
}

// SGDbOpsStatusSecurityUpgrade defines model for SGDbOpsStatusSecurityUpgrade.
type SGDbOpsStatusSecurityUpgrade struct {
	// A failure message (when available)
	Failure *string `json:"failure,omitempty"`

	// The instances present when the operation started
	InitialInstances *[]string `json:"initialInstances,omitempty"`

	// The instances that are pending to be restarted
	PendingToRestartInstances *[]string `json:"pendingToRestartInstances,omitempty"`

	// The primary instance when the operation started
	PrimaryInstance *string `json:"primaryInstance,omitempty"`

	// The instances that have been restarted
	RestartedInstances *[]string `json:"restartedInstances,omitempty"`

	// An ISO 8601 date indicating if and when the switchover finalized
	SwitchoverFinalized *string `json:"switchoverFinalized,omitempty"`

	// An ISO 8601 date indicating if and when the switchover initiated
	SwitchoverInitiated *string `json:"switchoverInitiated,omitempty"`
}
